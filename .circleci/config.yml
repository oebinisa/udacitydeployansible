version: 2.1

# Use a package of configuration called an orb.
orbs:
  # Choose either one of the orbs below
  # welcome: circleci/welcome-orb@0.4.1
  aws-cli: circleci/aws-cli@2.0.3

commands:
  destroy_environment:
    steps:
      - run:
          name: Destroy environment
          # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable
          # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 5 chars of the variable CIRCLE_CI_WORKFLOW_ID
          when: on_fail
          command: |
            aws cloudformation delete-stack \
            --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:18}

# Define the jobs we want to run for this project
jobs:
  create_infrastructure: # Job 1
    docker: # The primary container, where your job's commands will run
      - image: amazon/aws-cli # docker image with AWS CLI installed
    steps:
      - checkout # check out the code in the project directory
      - run:
          name: Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
              --template-file template.yml \
              --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:18} \
              --region us-west-2
      - run:
          name: create_ansible_inventory_file_with_header
          command: |
            echo "[all]" > inventory
      - run:
          name: add_ec2_instances_ipv4_to_ansible_inventory_file
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text >> inventory
      # Fail the job intentionally to simulate an error.
      # Uncomment the line below if you want to fail the current step
      - run: return 1
      - destroy_environment

  configure_infrastructure: # Job 2 - Config and Deployment
    docker: # The primary container, where your job's commands will run
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [f4:cc:19:75:f8:9c:0d:b5:70:b8:db:68:8c:72:e2:3f]
      - run:
          name: Install Ansible # Install Ansible
          command: |
            apk add --update ansible
      - run:
          name: Run Playbook and Configure server
          command: |
            ansible-playbook -i inventory main-remote.yml

  smoke_test: # Job 3 - Smoke Testing
    docker:
      - image: alpine:latest
    steps:
      - run: apk add --update curl # Update the Curl package
      - run:
        name: Smoke test job
        command: |
          URL="https://blog.udacity.com/"
          # Test if website exists
          if curl -s --head ${URL}
          then
            return 0
          else
            return 1
          fi
      - destroy_environment

# Sequential workflow
workflows:
  # Name the workflow
  myWorkflow:
    jobs:
      - create_infrastructure
      - configure_infrastructure:
          requires:
            - create_infrastructure
      - smoke_test:
          requires:
            - configure_infrastructure
